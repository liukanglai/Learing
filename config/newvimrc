" install plug

"if empty(glob('~/.vim/autoload/plug.vim'))
  "silent ! curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 
  "autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
"endif


" === Auto load for first time uses
"
"if empty(glob($HOME.'/.config/nvim/autoload/plug.vim'))
"	silent !curl -fLo $HOME/.config/nvim/autoload/plug.vim --create-dirs
"				\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
"endif

" === Create a _machine_specific.vim file to adjust machine specific stuff, like python interpreter location
"
"let has_machine_specific_file = 1
"if empty(glob('~/.config/nvim/_machine_specific.vim'))
	"let has_machine_specific_file = 0
	"silent! exec "!cp ~/.config/nvim/default_configs/_machine_specific_default.vim ~/.config/nvim/_machine_specific.vim"
"endif
"source $XDG_CONFIG_HOME/nvim/_machine_specific.vim


"" Open the _machine_specific.vim file if it has just been created
"if has_machine_specific_file == 0
	"exec "e ~/.config/nvim/_machine_specific.vim"
"endif

" ===
" === 1Basic Mappings
" ===
let mapleader=' '

map <LEADER>0  $
"map <LEADER>f  <C-f>
"map <LEADER>b  <C-b>
map <LEADER>w  <C-w>
map <LEADER>t :tabnew 
map <LEADER>e :Ex<CR> 
map <LEADER>h :noh<CR> 
map <LEADER>o za
map <LEADER>u zR
map <LEADER>i zM
noremap tn :NERDTree<CR>
noremap tt :Tagbar<CR>
noremap tl :LLPStartPreview<CR>
"noremap tr :source %<CR>
"noremap tc :w<CR>:so %<CR>
noremap tm :MarkdownPreview<CR>
noremap ta :TableModeToggle<CR>
nnoremap tu :UndotreeToggle<CR>
" 函数跳转
"noremap <leader>] :YcmCompleter GoTo<cr>  
" 可视模式下系统粘贴
vnoremap Y "+y 

" Save & quit
noremap Q :q<CR>
" noremap <C-q> :qa<CR>
noremap S :w<CR>
" Open the vimrc file anytime
noremap <LEADER>rc :e $HOME/.config/nvim/init.vim<CR>
"noremap <LEADER>rv :e .nvimrc<CR>

" Adjacent duplicate words
"noremap <LEADER>dw /\(\<\w\+\>\)\_s*\1

" Space to Tab
"nnoremap <LEADER>tt :%s/    /\t/g
"vnoremap <LEADER>tt :s/    /\t/g

inoremap <C-a> <ESC>A

" ===
" === Command Mode Cursor Movement
" ===
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <M-b> <S-Left>
cnoremap <M-w> <S-Right>

" ===
" === Window management
" ===
" Use <space> + new arrow keys for moving the cursor around windows
"noremap <LEADER>w <C-w>w
"noremap <LEADER>u <C-w>k
"noremap <LEADER>e <C-w>j
"noremap <LEADER>n <C-w>h
"noremap <LEADER>i <C-w>l
"noremap qf <C-w>o

"" Disable the default s key
"noremap s <nop>

"" split the screens to up (horizontal), down (horizontal), left (vertical), right (vertical)
"noremap su :set nosplitbelow<CR>:split<CR>:set splitbelow<CR>
"noremap se :set splitbelow<CR>:split<CR>
"noremap sn :set nosplitright<CR>:vsplit<CR>:set splitright<CR>
"noremap si :set splitright<CR>:vsplit<CR>

"" Resize splits with arrow keys
"noremap <up> :res +5<CR>
"noremap <down> :res -5<CR>
"noremap <left> :vertical resize-5<CR>
"noremap <right> :vertical resize+5<CR>

"" Place the two screens up and down
"noremap sh <C-w>t<C-w>K
"" Place the two screens side by side
"noremap sv <C-w>t<C-w>H

"" Rotate screens
"noremap srh <C-w>b<C-w>K
"noremap srv <C-w>b<C-w>H

"" Press <SPACE> + q to close the window below the current window
"noremap <LEADER>q <C-w>j:q<CR>


"" ===
"" === Tab management
"" ===
"" Create a new tab with tu
"noremap tu :tabe<CR>
"noremap tU :tab split<CR>
"" Move around tabs with tn and ti
"noremap tn :-tabnext<CR>
"noremap ti :+tabnext<CR>
"" Move the tabs with tmn and tmi
"noremap tmn :-tabmove<CR>
"noremap tmi :+tabmove<CR>


" ===
" === Markdown Settings
" ===
" Snippets
"source $XDG_CONFIG_HOME/nvim/md-snippets.vim
" auto spell
"autocmd BufRead,BufNewFile *.md setlocal spell


"" ===
"" === Other useful stuff
"" ===
"" Open a new instance of st with the cwd
"nnoremap \t :tabe<CR>:-tabmove<CR>:term sh -c 'st'<CR><C-\><C-N>:q<CR>

"" Opening a terminal window
"noremap <LEADER>/ :set splitbelow<CR>:split<CR>:res +10<CR>:term<CR>

"" Press space twice to jump to the next '<++>' and edit it
"noremap <LEADER><LEADER> <Esc>/<++><CR>:nohlsearch<CR>c4l

"" Spelling Check with <space>sc
"noremap <LEADER>sc :set spell!<CR>

"noremap <C-c> zz

"" Auto change directory to current dir
"autocmd BufEnter * silent! lcd %:p:h

"" Call figlet
"noremap tx :r !figlet

"" find and replace
"noremap \s :%s//g<left><left>


"" press f10 to show hlgroup
"function! SynGroup()
	"let l:s = synID(line('.'), col('.'), 1)
	"echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
"endfun
"map <F10> :call SynGroup()<CR>

"" Compile function
"noremap r :call CompileRunGcc()<CR>
"func! CompileRunGcc()
	"exec "w"
	"if &filetype == 'c'
		"exec "!g++ % -o %<"
		"exec "!time ./%<"
	"elseif &filetype == 'cpp'
		"set splitbelow
		"exec "!g++ -std=c++11 % -Wall -o %<"
		":sp
		":res -15
		":term ./%<
	"elseif &filetype == 'java'
		"set splitbelow
		":sp
		":res -5
		"term javac % && time java %<
	"elseif &filetype == 'sh'
		":!time bash %
	"elseif &filetype == 'python'
		"set splitbelow
		":sp
		":term python3 %
	"elseif &filetype == 'html'
		"silent! exec "!".g:mkdp_browser." % &"
	"elseif &filetype == 'markdown'
		"exec "InstantMarkdownPreview"
	"elseif &filetype == 'tex'
		"silent! exec "VimtexStop"
		"silent! exec "VimtexCompile"
	"elseif &filetype == 'dart'
		"exec "CocCommand flutter.run -d ".g:flutter_default_device." ".g:flutter_run_args
		"silent! exec "CocCommand flutter.dev.openDevLog"
	"elseif &filetype == 'javascript'
		"set splitbelow
		":sp
		":term export DEBUG="INFO,ERROR,WARNING"; node --trace-warnings .
	"elseif &filetype == 'go'
		"set splitbelow
		":sp
		":term go run .
	"endif
"endfunc

"" <f5> 编译和运行C map <LEADER>r :call CompileRunGcc()<cr>
"map <LEADER>r :call CompileRunGcc()<cr>
"func! CompileRunGcc()
"exec "w"
"exec "!gcc % -o %<"
"exec "! ./%<"
"endfunc

""< F5> 编译和运行C++
"map <f5> :call CompileRunGpp()<cr>
"func! CompileRunGpp()
"exec "w"
"exec "!g++ % -o %<"
"exec "! ./%<"
"exec "! rm %<"
"endfunc

"" <f5> 运行python程序
"map <f5> :w<cr>:!python %<cr>

"" <f5> 运行shell程序
"map <f5> :call CompileRunSH()<cr>
"func! CompileRunSH()
"exec "w"
"exec "!chmod a+x %"
"exec "!./%"
"endfunc

""<f9>  gdb调试
"map <LEADER>d :call Debug()<cr>
"func!  Debug()
"exec "w"
"exec "!gcc -g -o %< %"
"exec ":Termdebug %<"
"exec "! rm %<"
"endfunc
""</cr></f9></f9></cr></f5></f5></cr></cr></f5></f5></cr></f5></cr></f5></f5>

autocmd BufNewFile *.py,*.cc,*.sh,*.java exec ":call SetTitle()"
func SetTitle()
    if expand ("%:e") == 'sh'
        call setline(1, "#!/bin/bash")
        call setline(2, "#Author:bert")
        call setline(3, "#Blog:https://blog.51cto.com/zpf666")
        call setline(4, "#Time:".strftime("%F %T"))
        call setline(5, "#Name:".expand("%"))
        call setline(6, "#Version:V1.0")
        call setline(7, "#Description:This is a production script.")
    endif
endfunc


" ===
" === 2Terminal Colors
" ===

let g:terminal_color_0  = '#000000'
let g:terminal_color_1  = '#FF5555'
let g:terminal_color_2  = '#50FA7B'
let g:terminal_color_3  = '#F1FA8C'
let g:terminal_color_4  = '#BD93F9'
let g:terminal_color_5  = '#FF79C6'
let g:terminal_color_6  = '#8BE9FD'
let g:terminal_color_7  = '#BFBFBF'
let g:terminal_color_8  = '#4D4D4D'
let g:terminal_color_9  = '#FF6E67'
let g:terminal_color_10 = '#5AF78E'
let g:terminal_color_11 = '#F4F99D'
let g:terminal_color_12 = '#CAA9FA'
let g:terminal_color_13 = '#FF92D0'
let g:terminal_color_14 = '#9AEDFE'

" UI

set termguicolors " 真彩色
"set t_Co=256
set laststatus=2 " always show status bar

" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")} " status line
" tags父目录递归查找 ;表示持续查找
"set tags=tags;
" Regenerate tags when saving Python files.
"autocmd BufWritePost *.py silent! !ctags -R &
"autocmd BufWritePost *.c silent! !ctags -R &
"autocmd BufWritePost *.cpp silent! !ctags -R &


" ====================
" === 3Editor Setup ===
" ====================
" ===
" === System
" ===
"set clipboard=unnamedplus
set clipboard+=unnamedplus
" 配色
let &t_ut='' 
set autochdir
"光标不同显示
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_SR = "\<Esc>]50;CursorShape=2\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
endif
set encoding=utf-8
"set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
"设置文件编码"
"set fileencodings=utf-8 
"设置终端编码"
"set termencoding=utf-8 
"设置语言编码"
"set langmenu=zh_CN.UTF-8 
"显示中文帮助"
"set helplang=cn 

" ===
" === Necessary Commands to Execute
" ===
exec "nohlsearch"

filetype on
filetype plugin on
filetype indent on
filetype plugin indent on 

" ===
" === Editor behavior
" ===
set exrc
set secure
set number
set relativenumber

"用浅色高亮显示当前行"
set nocursorcolumn "竖
set cursorline "横
autocmd InsertLeave * se cul
autocmd InsertEnter * se nocul

set hidden
"set expandtab " tab 展开为空格
set noexpandtab
set smarttab
set shiftwidth=4
set softtabstop=2
set tabstop=4
"set autoindent
"开启新行时使用智能自动缩进"
set smartindent
set cindent
set list
set listchars=tab:\|\ ,trail:▫
set scrolloff=5 "光标移动到buffer的顶部和底部时保持5行距离
"set ttimeoutlen=0
set ttimeoutlen=100
"set notimeout

set viewoptions=cursor,folds,slash,unix
set wrap "自动换行”
set tw=0 "光标超过0列折行
set indentexpr=
set showmatch " 括号匹配
set sm "显示括号配对情况。打开这个选项后，当输入后括号(包括小括号、中括号、大括号) 的时候，光标会跳回前括号片刻，然后跳回来，以此显示括号的配对情况。

" autocmd BUfRead * normal zR " open a file, open all fold.
"set foldmethod=indent " use indent to fold
"set foldlevel=99
set foldenable
set formatoptions-=tc
set splitright
set splitbelow
set noshowmode
set showcmd " last command
set wildmenu "增强模式中的命令行自动完成操作"
set ignorecase
set smartcase
syntax on
set autoread
set report=0 "通过使用: commands命令，告诉我们文件的哪一行被改变过"
"被分割的窗口间显示空白，便于阅读"
set fillchars=vert:\ ,stl:\ ,stlnc:\
set spell " 拼写检查 (c-x, than s)
set ruler "显示标尺"

set backspace=eol,start,indent "使回格键（backspace）正常处理indent, eol, start等"
highlight Search ctermbg=black ctermfg=white guifg=white guibg=black
set hlsearch
set incsearch
set wildignorecase

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c
"set inccommand=split

"文件类型自动检测，代码智能补全"
set completeopt=longest,noinsert,menuone,noselect,preview
set ttyfast "should make scrolling faster
set lazyredraw "same as above
set visualbell
silent !mkdir -p $HOME/.config/nvim/tmp/backup
silent !mkdir -p $HOME/.config/nvim/tmp/undo
silent !mkdir -p $HOME/.config/nvim/tmp/sessions
set backupdir=$HOME/.config/nvim/tmp/backup,.
set directory=$HOME/.config/nvim/tmp/backup,.
if has('persistent_undo')
	set undofile
	set undodir=$HOME/.config/nvim/tmp/undo,.
endif
"set colorcolumn=100 中间线
set updatetime=100
set virtualedit=block

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" ===
" === Terminal Behaviors
" ===
"let g:neoterm_autoscroll = 1
"autocmd TermOpen term://* startinsert
"tnoremap <C-N> <C-\><C-N>
"tnoremap <C-O> <C-\><C-N><C-O>


" ===
" === 4Install Plugins with Vim-Plug
" ===

"call plug#begin('$HOME/.config/nvim/plugged')

"" Plug 'LoricAndre/fzterm.nvim'

"" Testing my own plugin
"" Plug 'theniceboy/vim-calc'

"" Treesitter
"Plug 'nvim-treesitter/nvim-treesitter'
"Plug 'nvim-treesitter/playground'

"" Pretty Dress
"Plug 'theniceboy/nvim-deus'
""Plug 'arzg/vim-colors-xcode'

"" Status line
"Plug 'theniceboy/eleline.vim'
"Plug 'ojroques/vim-scrollstatus'

"" General Highlighter
"Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }
"Plug 'RRethy/vim-illuminate'

"" File navigation
""Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
""Plug 'Xuyuanp/nerdtree-git-plugin'
"Plug 'junegunn/fzf.vim'
"Plug 'Yggdroot/LeaderF', { 'do': './install.sh' }
"Plug 'kevinhwang91/rnvimr'
"Plug 'airblade/vim-rooter'
"Plug 'pechorin/any-jump.vim'

"" Taglist
"Plug 'liuchengxu/vista.vim'

"" Debugger
"" Plug 'puremourning/vimspector', {'do': './install_gadget.py --enable-c --enable-python --enable-go'}



"" Undo Tree
"Plug 'mbbill/undotree'

"" Git
"Plug 'theniceboy/vim-gitignore', { 'for': ['gitignore', 'vim-plug'] }
"Plug 'fszymanski/fzf-gitignore', { 'do': ':UpdateRemotePlugins' }
""Plug 'mhinz/vim-signify'
"Plug 'airblade/vim-gitgutter'
"Plug 'cohama/agit.vim'
"Plug 'kdheepak/lazygit.nvim'

"" Autoformat
"Plug 'google/vim-maktaba'
"Plug 'google/vim-codefmt'

"" Tex
"" Plug 'lervag/vimtex'

"" CSharp
"Plug 'OmniSharp/omnisharp-vim'
"Plug 'ctrlpvim/ctrlp.vim' , { 'for': ['cs', 'vim-plug'] } " omnisharp-vim dependency

"" HTML, CSS, JavaScript, Typescript, PHP, JSON, etc.
"Plug 'elzr/vim-json'
"Plug 'neoclide/jsonc.vim'
"Plug 'othree/html5.vim'
"Plug 'alvan/vim-closetag'
"" Plug 'hail2u/vim-css3-syntax' " , { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
"" Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }
"" Plug 'pangloss/vim-javascript', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
"Plug 'yuezk/vim-js', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
"" Plug 'MaxMEllon/vim-jsx-pretty', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
"" Plug 'jelera/vim-javascript-syntax', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
""Plug 'jaxbot/browserlink.vim'
"Plug 'HerringtonDarkholme/yats.vim'
"" Plug 'posva/vim-vue'
"" Plug 'evanleck/vim-svelte', {'branch': 'main'}
"" Plug 'leafOfTree/vim-svelte-plugin'
"" Plug 'leafgarland/typescript-vim'
"Plug 'MaxMEllon/vim-jsx-pretty'
"Plug 'pangloss/vim-javascript'
"Plug 'leafgarland/typescript-vim'
"Plug 'peitalin/vim-jsx-typescript'
"Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
"Plug 'pantharshit00/vim-prisma'

"" Go
"Plug 'fatih/vim-go' , { 'for': ['go', 'vim-plug'], 'tag': '*' }

"" Python
"" Plug 'tmhedberg/SimpylFold', { 'for' :['python', 'vim-plug'] }
"Plug 'Vimjas/vim-python-pep8-indent', { 'for' :['python', 'vim-plug'] }
"Plug 'numirias/semshi', { 'do': ':UpdateRemotePlugins', 'for' :['python', 'vim-plug'] }
""Plug 'vim-scripts/indentpython.vim', { 'for' :['python', 'vim-plug'] }
""Plug 'plytophogy/vim-virtualenv', { 'for' :['python', 'vim-plug'] }
"Plug 'tweekmonster/braceless.vim', { 'for' :['python', 'vim-plug'] }

"" Flutter
"" Plug 'dart-lang/dart-vim-plugin'
"Plug 'f-person/pubspec-assist-nvim', { 'for' : ['pubspec.yaml'] }

"" Swift
"Plug 'keith/swift.vim'
"Plug 'arzg/vim-swift'

"" Markdown
"Plug 'suan/vim-instant-markdown', {'for': 'markdown'}
"Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle', 'for': ['text', 'markdown', 'vim-plug'] }
"Plug 'mzlogin/vim-markdown-toc', { 'for': ['gitignore', 'markdown', 'vim-plug'] }
"Plug 'dkarter/bullets.vim'

"" Other filetypes
"" Plug 'jceb/vim-orgmode', {'for': ['vim-plug', 'org']}

"" Editor Enhancement
""Plug 'Raimondi/delimitMate'
"Plug 'jiangmiao/auto-pairs'
"Plug 'mg979/vim-visual-multi'
"Plug 'tomtom/tcomment_vim' " in <space>cn to comment a line
"Plug 'theniceboy/antovim' " gs to switch
"Plug 'tpope/vim-surround' " type yskw' to wrap the word with '' or type cs'` to change 'word' to `word`
"Plug 'gcmt/wildfire.vim' " in Visual mode, type k' to select all text in '', or type k) k] k} kp
"Plug 'junegunn/vim-after-object' " da= to delete what's after =
"Plug 'godlygeek/tabular' " ga, or :Tabularize <regex> to align
"Plug 'tpope/vim-capslock'	" Ctrl+L (insert) to toggle capslock
"Plug 'easymotion/vim-easymotion'
"" Plug 'Konfekt/FastFold'
""Plug 'junegunn/vim-peekaboo'
""Plug 'wellle/context.vim'
"Plug 'svermeulen/vim-subversive'
"Plug 'theniceboy/argtextobj.vim'
"Plug 'rhysd/clever-f.vim'
"Plug 'AndrewRadev/splitjoin.vim'
"Plug 'theniceboy/pair-maker.vim'
"Plug 'theniceboy/vim-move'
"" Plug 'jeffkreeftmeijer/vim-numbertoggle'
"Plug 'Yggdroot/indentLine'

"" For general writing
"" Plug 'junegunn/goyo.vim'
""Plug 'reedes/vim-wordy'
""Plug 'ron89/thesaurus_query.vim'

"" Bookmarks
"" Plug 'MattesGroeger/vim-bookmarks'

"" Find & Replace
"Plug 'brooth/far.vim', { 'on': ['F', 'Far', 'Fardo'] }

"" Documentation
""Plug 'KabbAmine/zeavim.vim' " <LEADER>z to find doc

"" Mini Vim-APP
""Plug 'jceb/vim-orgmode'
""Plug 'mhinz/vim-startify'
"Plug 'skywind3000/asynctasks.vim'
"Plug 'skywind3000/asyncrun.vim'


"" Other visual enhancement
"Plug 'luochen1990/rainbow'
"Plug 'mg979/vim-xtabline'
"Plug 'ryanoasis/vim-devicons'
"Plug 'wincent/terminus'

"" Other useful utilities
"Plug 'lambdalisue/suda.vim' " do stuff like :sudowrite
"" Plug 'makerj/vim-pdf'
""Plug 'xolox/vim-session'
""Plug 'xolox/vim-misc' " vim-session dep

"" Dependencies
"" Plug 'MarcWeber/vim-addon-mw-utils'
"" Plug 'kana/vim-textobj-user'
"" Plug 'roxma/nvim-yarp'


"call plug#end()
"set re=0

"" experimental
"set lazyredraw
""set regexpengine=1


"" ===
"" === Dress up my vim
"" ===
"set termguicolors " enable true colors support
"let $NVIM_TUI_ENABLE_TRUE_COLOR=1
""set background=dark
""let ayucolor="mirage"
""let g:oceanic_next_terminal_bold = 1
""let g:oceanic_next_terminal_italic = 1
""let g:one_allow_italics = 1

""color dracula
""color one
"color deus
""color gruvbox
""let ayucolor="light"
""color ayu
""color xcodelighthc
""set background=light
""set cursorcolumn

"hi NonText ctermfg=gray guifg=grey10
""hi SpecialKey ctermfg=blue guifg=grey70

"" ===================== Start of Plugin Settings =====================


"" ===
"" === eleline.vim
"" ===
"let g:airline_powerline_fonts = 0


"" ==
"" == GitGutter
"" ==
"" let g:gitgutter_signs = 0
"let g:gitgutter_sign_allow_clobber = 0
"let g:gitgutter_map_keys = 0
"let g:gitgutter_override_sign_column_highlight = 0
"let g:gitgutter_preview_win_floating = 1
"let g:gitgutter_sign_added = '▎'
"let g:gitgutter_sign_modified = '░'
"let g:gitgutter_sign_removed = '▏'
"let g:gitgutter_sign_removed_first_line = '▔'
"let g:gitgutter_sign_modified_removed = '▒'
"" autocmd BufWritePost * GitGutter
"nnoremap <LEADER>gf :GitGutterFold<CR>
"nnoremap H :GitGutterPreviewHunk<CR>
"nnoremap <LEADER>g- :GitGutterPrevHunk<CR>
"nnoremap <LEADER>g= :GitGutterNextHunk<CR>



"" ===
"" === vim-instant-markdown
"" ===
"let g:instant_markdown_slow = 0
"let g:instant_markdown_autostart = 0
"" let g:instant_markdown_open_to_the_world = 1
"" let g:instant_markdown_allow_unsafe_content = 1
"" let g:instant_markdown_allow_external_content = 0
"" let g:instant_markdown_mathjax = 1
"let g:instant_markdown_autoscroll = 1


"" ===
"" === vim-table-mode
"" ===
"noremap <LEADER>tm :TableModeToggle<CR>
""let g:table_mode_disable_mappings = 1
"let g:table_mode_cell_text_object_i_map = 'k<Bar>'


"" ===
"" === FZF
"" ===
"set rtp+=/usr/local/opt/fzf
"set rtp+=/home/linuxbrew/.linuxbrew/opt/fzf
"set rtp+=/home/david/.linuxbrew/opt/fzf
"nnoremap <c-p> :Leaderf file<CR>
"" noremap <silent> <C-p> :Files<CR>
"noremap <silent> <C-f> :Rg<CR>
"noremap <silent> <C-h> :History<CR>
""noremap <C-t> :BTags<CR>
"" noremap <silent> <C-l> :Lines<CR>
"noremap <silent> <C-w> :Buffers<CR>
"noremap <leader>; :History:<CR>

"let g:fzf_preview_window = 'right:60%'
"let g:fzf_commits_log_options = '--graph --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr"'

"function! s:list_buffers()
  "redir => list
  "silent ls
  "redir END
  "return split(list, "\n")
"endfunction

"function! s:delete_buffers(lines)
  "execute 'bwipeout' join(map(a:lines, {_, line -> split(line)[0]}))
"endfunction

"command! BD call fzf#run(fzf#wrap({
  "\ 'source': s:list_buffers(),
  "\ 'sink*': { lines -> s:delete_buffers(lines) },
  "\ 'options': '--multi --reverse --bind ctrl-a:select-all+accept'
"\ }))

"noremap <c-d> :BD<CR>

"let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.8 } }


"" ===
"" === Leaderf
"" ===
"" let g:Lf_WindowPosition = 'popup'
"let g:Lf_PreviewInPopup = 1
"let g:Lf_PreviewCode = 1
"let g:Lf_ShowHidden = 1
"let g:Lf_ShowDevIcons = 1
"let g:Lf_CommandMap = {
"\   '<C-k>': ['<C-u>'],
"\   '<C-j>': ['<C-e>'],
"\   '<C-]>': ['<C-v>'],
"\   '<C-p>': ['<C-n>'],
"\}
"let g:Lf_UseVersionControlTool = 0
"let g:Lf_IgnoreCurrentBufferName = 1
"let g:Lf_WildIgnore = {
        "\ 'dir': ['.git', 'vendor', 'node_modules'],
        "\ 'file': ['__vim_project_root', 'class']
        "\}
"let g:Lf_UseMemoryCache = 0
"let g:Lf_UseCache = 0


"" ===
"" === CTRLP (Dependency for omnisharp)
"" ===
"let g:ctrlp_map = ''
"let g:ctrlp_cmd = 'CtrlP'


" ===
" === vim-bookmarks
" ===
" let g:bookmark_no_default_key_mappings = 1
" nmap mt <Plug>BookmarkToggle
" nmap ma <Plug>BookmarkAnnotate
" nmap ml <Plug>BookmarkShowAll
" nmap mi <Plug>BookmarkNext
" nmap mn <Plug>BookmarkPrev
" nmap mC <Plug>BookmarkClear
" nmap mX <Plug>BookmarkClearAll
" nmap mu <Plug>BookmarkMoveUp
" nmap me <Plug>BookmarkMoveDown
" nmap <Leader>g <Plug>BookmarkMoveToLine
" let g:bookmark_save_per_working_dir = 1
" let g:bookmark_auto_save = 1
" let g:bookmark_highlight_lines = 1
" let g:bookmark_manage_per_buffer = 1
" let g:bookmark_save_per_working_dir = 1
" let g:bookmark_center = 1
" let g:bookmark_auto_close = 1
" let g:bookmark_location_list = 1


"" ===
"" === Undotree
"" ===
"noremap L :UndotreeToggle<CR>
"let g:undotree_DiffAutoOpen = 1
"let g:undotree_SetFocusWhenToggle = 1
"let g:undotree_ShortIndicators = 1
"let g:undotree_WindowLayout = 2
"let g:undotree_DiffpanelHeight = 8
"let g:undotree_SplitWidth = 24
"function g:Undotree_CustomMap()
	"nmap <buffer> u <plug>UndotreeNextState
	"nmap <buffer> e <plug>UndotreePreviousState
	"nmap <buffer> U 5<plug>UndotreeNextState
	"nmap <buffer> E 5<plug>UndotreePreviousState
"endfunc


" ==
" == vim-multiple-cursor
" ==
"let g:multi_cursor_use_default_mapping = 0
"let g:multi_cursor_start_word_key = '<c-k>'
"let g:multi_cursor_select_all_word_key = '<a-k>'
"let g:multi_cursor_start_key = 'g<c-k>'
"let g:multi_cursor_select_all_key = 'g<a-k>'
"let g:multi_cursor_next_key = '<c-k>'
"let g:multi_cursor_prev_key = '<c-p>'
"let g:multi_cursor_skip_key = '<C-s>'
"let g:multi_cursor_quit_key = '<Esc>'


"" ===
"" === vim-visual-multi
"" ===
""let g:VM_theme             = 'iceblue'
""let g:VM_default_mappings = 0
"let g:VM_leader                     = {'default': ',', 'visual': ',', 'buffer': ','}
"let g:VM_maps                       = {}
"let g:VM_custom_motions             = {'n': 'h', 'i': 'l', 'u': 'k', 'e': 'j', 'N': '0', 'I': '$', 'h': 'e'}
"let g:VM_maps['i']                  = 'k'
"let g:VM_maps['I']                  = 'K'
"let g:VM_maps['Find Under']         = '<C-k>'
"let g:VM_maps['Find Subword Under'] = '<C-k>'
"let g:VM_maps['Find Next']          = ''
"let g:VM_maps['Find Prev']          = ''
"let g:VM_maps['Remove Region']      = 'q'
"let g:VM_maps['Skip Region']        = '<c-n>'
"let g:VM_maps["Undo"]               = 'l'
"let g:VM_maps["Redo"]               = '<C-r>'


"" ===
"" === Far.vim
"" ===
"noremap <LEADER>f :F  **/*<left><left><left><left><left>
"let g:far#mapping = {
		"\ "replace_undo" : ["l"],
		"\ }



"" ===
"" === Bullets.vim
"" ===
"" let g:bullets_set_mappings = 0
"let g:bullets_enabled_file_types = [
			"\ 'markdown',
			"\ 'text',
			"\ 'gitcommit',
			"\ 'scratch'
			"\]


"" ===
"" === Vista.vim
"" ===
"noremap <LEADER>v :Vista!!<CR>
"noremap <c-t> :silent! Vista finder coc<CR>
"let g:vista_icon_indent = ["╰─▸ ", "├─▸ "]
"let g:vista_default_executive = 'coc'
"let g:vista_fzf_preview = ['right:50%']
"let g:vista#renderer#enable_icon = 1
"let g:vista#renderer#icons = {
"\   "function": "\uf794",
"\   "variable": "\uf71b",
"\  }
"" function! NearestMethodOrFunction() abort
" 	return get(b:, 'vista_nearest_method_or_function', '')
" endfunction
" set statusline+=%{NearestMethodOrFunction()}
" autocmd VimEnter * call vista#RunForNearestMethodOrFunction()

"let g:scrollstatus_size = 15

" ===
" === fzf-gitignore
" ===
"noremap <LEADER>gi :FzfGitignore<CR>




"" ===
"" === vimtex
"" ===
""let g:vimtex_view_method = ''
"let g:vimtex_view_general_viewer = 'llpp'
"let g:vimtex_mappings_enabled = 0
"let g:vimtex_text_obj_enabled = 0
"let g:vimtex_motion_enabled = 0
"let maplocalleader=' '



"" ===
"" === vim-go
"" ===
"let g:go_echo_go_info = 0
"let g:go_doc_popup_window = 1
"let g:go_def_mapping_enabled = 0
"let g:go_template_autocreate = 0
"let g:go_textobj_enabled = 0
"let g:go_auto_type_info = 1
"let g:go_def_mapping_enabled = 0
"let g:go_highlight_array_whitespace_error = 1
"let g:go_highlight_build_constraints = 1
"let g:go_highlight_chan_whitespace_error = 1
"let g:go_highlight_extra_types = 1
"let g:go_highlight_fields = 1
"let g:go_highlight_format_strings = 1
"let g:go_highlight_function_calls = 1
"let g:go_highlight_function_parameters = 1
"let g:go_highlight_functions = 1
"let g:go_highlight_generate_tags = 1
"let g:go_highlight_methods = 1
"let g:go_highlight_operators = 1
"let g:go_highlight_space_tab_error = 1
"let g:go_highlight_string_spellcheck = 1
"let g:go_highlight_structs = 1
"let g:go_highlight_trailing_whitespace_error = 1
"let g:go_highlight_types = 1
"let g:go_highlight_variable_assignments = 0
"let g:go_highlight_variable_declarations = 0
"let g:go_doc_keywordprg_enabled = 0


"" ===
"" === AutoFormat
"" ===
"augroup autoformat_settings
	"" autocmd FileType bzl AutoFormatBuffer buildifier
	"" autocmd FileType c,cpp,proto,javascript,arduino AutoFormatBuffer clang-format
	"" autocmd FileType dart AutoFormatBuffer dartfmt
	"" autocmd FileType go AutoFormatBuffer gofmt
	"" autocmd FileType gn AutoFormatBuffer gn
	"" autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
	"autocmd FileType java AutoFormatBuffer google-java-format
	"" autocmd FileType python AutoFormatBuffer yapf
	"" Alternative: autocmd FileType python AutoFormatBuffer autopep8
	"" autocmd FileType rust AutoFormatBuffer rustfmt
	"" autocmd FileType vue AutoFormatBuffer prettier
"augroup END


"" ===
"" === OmniSharp
"" ===
"let g:OmniSharp_typeLookupInPreview = 1
"let g:omnicomplete_fetch_full_documentation = 1

"let g:OmniSharp_server_use_mono = 1
"let g:OmniSharp_server_stdio = 1
"let g:OmniSharp_highlight_types = 2
"let g:OmniSharp_selector_ui = 'ctrlp'

"autocmd Filetype cs nnoremap <buffer> gd :OmniSharpPreviewDefinition<CR>
"autocmd Filetype cs nnoremap <buffer> gr :OmniSharpFindUsages<CR>
"autocmd Filetype cs nnoremap <buffer> gy :OmniSharpTypeLookup<CR>
"autocmd Filetype cs nnoremap <buffer> ga :OmniSharpGetCodeActions<CR>
"autocmd Filetype cs nnoremap <buffer> <LEADER>rn :OmniSharpRename<CR><C-N>:res +5<CR>

"sign define OmniSharpCodeActions text=💡

"augroup OSCountCodeActions
	"autocmd!
	"autocmd FileType cs set signcolumn=yes
	"autocmd CursorHold *.cs call OSCountCodeActions()
"augroup END

"function! OSCountCodeActions() abort
	"if bufname('%') ==# '' || OmniSharp#FugitiveCheck() | return | endif
	"if !OmniSharp#IsServerRunning() | return | endif
	"let opts = {
				"\ 'CallbackCount': function('s:CBReturnCount'),
				"\ 'CallbackCleanup': {-> execute('sign unplace 99')}
				"\}
	"call OmniSharp#CountCodeActions(opts)
"endfunction

"function! s:CBReturnCount(count) abort
	"if a:count
		"let l = getpos('.')[1]
		"let f = expand('%:p')
		"execute ':sign place 99 line='.l.' name=OmniSharpCodeActions file='.f
	"endif
"endfunction


"" ===
"" === vim-easymotion
"" ===
"let g:EasyMotion_do_mapping = 0
"let g:EasyMotion_do_shade = 0
"let g:EasyMotion_smartcase = 1
"" map ' <Plug>(easymotion-overwin-f2)
"" nmap ' <Plug>(easymotion-overwin-f2)
""map E <Plug>(easymotion-j)
""map U <Plug>(easymotion-k)
""nmap f <Plug>(easymotion-overwin-f)
""map \; <Plug>(easymotion-prefix)
""nmap ' <Plug>(easymotion-overwin-f2)
""map 'l <Plug>(easymotion-bd-jk)
""nmap 'l <Plug>(easymotion-overwin-line)
""map  'w <Plug>(easymotion-bd-w)
""nmap 'w <Plug>(easymotion-overwin-w)


"" ===
"" === goyo
"" ===
"map <LEADER>gy :Goyo<CR>


"" ===
"" === jsx
"" ===
"let g:vim_jsx_pretty_colorful_config = 1



"" ===
"" === tabular
"" ===
"vmap ga :Tabularize /


"" ===
"" === vim-after-object
"" ===
"autocmd VimEnter * call after_object#enable('=', ':', '-', '#', ' ')


"" ===
"" === rainbow
"" ===
"let g:rainbow_active = 1


"" ===
"" === xtabline
"" ===
"let g:xtabline_settings = {}
"let g:xtabline_settings.enable_mappings = 0
"let g:xtabline_settings.tabline_modes = ['tabs', 'buffers']
"let g:xtabline_settings.enable_persistance = 0
"let g:xtabline_settings.last_open_first = 1
"noremap to :XTabCycleMode<CR>
"noremap \p :echo expand('%:p')<CR>



"" ===
"" === context.vim
"" ===
""let g:context_add_mappings = 0
""noremap <leader>ct :ContextToggle<CR>


"" ===
"" === suda.vim
"" ===
"cnoreabbrev sudowrite w suda://%
"cnoreabbrev sw w suda://%


"" ===
"" === vimspector
"" ===
"let g:vimspector_enable_mappings = 'HUMAN'
"function! s:read_template_into_buffer(template)
	"" has to be a function to avoid the extra space fzf#run insers otherwise
	"execute '0r ~/.config/nvim/sample_vimspector_json/'.a:template
"endfunction
"command! -bang -nargs=* LoadVimSpectorJsonTemplate call fzf#run({
			"\   'source': 'ls -1 ~/.config/nvim/sample_vimspector_json',
			"\   'down': 20,
			"\   'sink': function('<sid>read_template_into_buffer')
			"\ })
"" noremap <leader>vs :tabe .vimspector.json<CR>:LoadVimSpectorJsonTemplate<CR>
"sign define vimspectorBP text=☛ texthl=Normal
"sign define vimspectorBPDisabled text=☞ texthl=Normal
"sign define vimspectorPC text=🔶 texthl=SpellBad


"" ===
"" === reply.vim
"" ===
""noremap <LEADER>rp :w<CR>:Repl<CR><C-\><C-N><C-w><C-h>
""noremap <LEADER>rs :ReplSend<CR><C-w><C-l>a<CR><C-\><C-N><C-w><C-h>
""noremap <LEADER>rt :ReplStop<CR>


"" ===
"" === vim-markdown-toc
"" ===
""let g:vmt_auto_update_on_save = 0
""let g:vmt_dont_insert_fence = 1
"let g:vmt_cycle_list_item_markers = 1
"let g:vmt_fence_text = 'TOC'
"let g:vmt_fence_closing_text = '/TOC'


"" ===
"" === rnvimr
"" ===
"let g:rnvimr_ex_enable = 1
"let g:rnvimr_pick_enable = 1
"let g:rnvimr_draw_border = 0
"" let g:rnvimr_bw_enable = 1
"highlight link RnvimrNormal CursorLine
"nnoremap <silent> R :RnvimrToggle<CR><C-\><C-n>:RnvimrResize 0<CR>
"let g:rnvimr_action = {
            "\ '<C-t>': 'NvimEdit tabedit',
            "\ '<C-x>': 'NvimEdit split',
            "\ '<C-v>': 'NvimEdit vsplit',
            "\ 'gw': 'JumpNvimCwd',
            "\ 'yw': 'EmitRangerCwd'
            "\ }
"let g:rnvimr_layout = { 'relative': 'editor',
            "\ 'width': &columns,
            "\ 'height': &lines,
            "\ 'col': 0,
            "\ 'row': 0,
            "\ 'style': 'minimal' }
"let g:rnvimr_presets = [{'width': 1.0, 'height': 1.0}]


"" ===
"" === vim-subversive
"" ===
"nmap s <plug>(SubversiveSubstitute)
"nmap ss <plug>(SubversiveSubstituteLine)


"" ===
"" === vim-illuminate
"" ===
"let g:Illuminate_delay = 750
"hi illuminatedWord cterm=undercurl gui=undercurl


"" ===
"" === vim-rooter
"" ===
"let g:rooter_patterns = ['__vim_project_root', '.git/']
"let g:rooter_silent_chdir = 1


"" ===
"" === AsyncRun
"" ===
"noremap gp :AsyncRun git push<CR>


"" ===
"" === AsyncTasks
"" ===
"let g:asyncrun_open = 6



"" ===
"" === tcomment_vim
"" ===
"nnoremap ci cl
"let g:tcomment_textobject_inlinecomment = ''
"nmap <LEADER>cn g>c
"vmap <LEADER>cn g>
"nmap <LEADER>cu g<c
"vmap <LEADER>cu g<


"" ===
"" === vim-move
"" ===
"let g:move_key_modifier = 'C'


"" ===
"" === any-jump
"" ===
"nnoremap j :AnyJump<CR>
"let g:any_jump_window_width_ratio  = 0.8
"let g:any_jump_window_height_ratio = 0.9


"" ===
"" === typescript-vim
"" ===
"let g:typescript_ignore_browserwords = 1


"" ===
"" === Agit
"" ===
"nnoremap <LEADER>gl :Agit<CR>
"let g:agit_no_default_mappings = 1



"" ===
"" === lazygit.nvim
"" ===
"noremap <c-g> :LazyGit<CR>
"let g:lazygit_floating_window_winblend = 0 " transparency of floating window
"let g:lazygit_floating_window_scaling_factor = 1.0 " scaling factor for floating window
"let g:lazygit_floating_window_corner_chars = ['╭', '╮', '╰', '╯'] " customize lazygit popup window corner characters
"let g:lazygit_use_neovim_remote = 1 " for neovim-remote support


call plug#begin('~/.vim/plugged')


" tabline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" use theme
Plug 'morhetz/gruvbox'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'ajmwagar/vim-deus'
Plug 'ryanoasis/vim-devicons'
"Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" ()color
" Plug 'luochen1990/rainbow'

" type

" can complete the () and so on
Plug 'raimondi/delimitmate'

" search
" Plug 'mileszs/ack.vim'  
" Plug 'ctrlpvim/ctrlp.vim'

" comment
" in <space>cc to comment a line
Plug 'scrooloose/nerdcommenter' 

" File navigation
" Plug 'preservim/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'ap/vim-buftabline'

" search fzf ack

" 键映射
" [f [b
Plug 'tpope/vim-unimpaired'
" <leader><leader>+
Plug 'easymotion/vim-easymotion'
" assignment promot
" Plug 'Shougo/echodoc.vim'


" Code 

" Taglist
" Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }                    

" 项目文件，跳转 
"Plug 'ludovicchabant/vim-gutentags'
" change to .h file, :A :AT ...

" Error checking
Plug 'w0rp/ale'
" Plug 'scrooloose/syntastic'

" Auto Complete
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'Valloric/YouCompleteMe', {'do': './install.py'}
"Plug 'wellle/tmux-complete.vim'

" snippets
" Track the engine.
" Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
" Plug 'honza/vim-snippets'
" cs"(
" Plug 'tpope/vim-surround'



" debug
"Plug 'puremourning/vimspector'

" Undo Tree 修改历史
"noremap <f5> :GundoToggle<cr>
" Plug 'sjl/gundo.vim'
Plug 'mbbill/undotree'

" Other visual enhancement
" Plug 'nathanaelkane/vim-indent-guides'
Plug 'Yggdroot/indentLine'
" 相同字符串下划线
Plug 'itchyny/vim-cursorword'

" highlight
Plug 'octol/vim-cpp-enhanced-highlight'

" register
Plug 'junegunn/vim-peekaboo'
" mark
Plug 'kshenoy/vim-signature'

" type
Plug 'rlue/vim-barbaric'
" Plug 'lyokha/vim-xkbswitch' let g:XkbSwitchEnabled = 1

" Git
" Plug 'rhysd/conflict-marker.vim'
" Plug 'tpope/vim-fugitive'
" Plug 'mhinz/vim-signify'
" Plug 'gisphm/vim-gitignore', { 'for': ['gitignore', 'vim-plug'] }

" HTML, CSS, JavaScript, PHP, JSON, etc.
" Plug 'elzr/vim-json'
" Plug 'hail2u/vim-css3-syntax'
" Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }
" Plug 'gko/vim-coloresque', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
" Plug 'pangloss/vim-javascript', { 'for' :['javascript', 'vim-plug'] }
" HTML
" Plug 'mattn/emmet-vim'

" Python
" Plug 'vim-scripts/indentpython.vim'

" Other useful utilities
" Plug 'terryma/vim-multiple-cursors'

" distraction free writing mode
" Plug 'junegunn/goyo.vim' 


" Dependencies

" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'kana/vim-textobj-user'
" Plug 'fadein/vim-FIGlet'

" Markdown
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install_sync() }, 'for': ['markdown', 'vim-plug'] }
" 补全
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }  
" 格式
" Plug 'plasticboy/vim-markdown', { 'for': 'markdown'}
" 自定义
"Plug 'vimwiki/vimwiki'


" Latex
Plug 'lervag/vimtex'
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }

call plug#end()

" let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
" latex
 let g:livepreview_engine = 'xelatex'

set background=dark

let g:airline_theme='gruvbox'
colorscheme gruvbox 
"colorscheme dracula
let g:gruvbox_italic=1

"set t_Co=256
"set termguicolors
"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"colorscheme deus
"let g:deus_termcolors=256

"let g:airline_theme='luna'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

"  powerline symbols
 let g:airline_left_sep = ''
 let g:airline_left_alt_sep = ''
 let g:airline_right_sep = ''
 let g:airline_right_alt_sep = ''
 let g:airline_symbols.branch = ''
 let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = '☰'
 let g:airline_symbols.maxlinenr = ''
 let g:airline_symbols.dirty='⚡'

" type


" indent
let g:indentLine_enabled = 1
"let g:indentLine_char_list = ['┆']
let g:indentLine_char_list = ['¦']


" code

" 'coc-actions', 'coc-texlab', 'coc-markdownlint'
" javascript: coc-eslint, js or ts: coc-tsserver, coc-python, coc-pyright for,
" coc-phpls, coc-snippets

"" === coc.nvim
"" ===
let g:coc_global_extensions = [
	\ 'coc-css',
	\ 'coc-diagnostic',
	\ 'coc-docker',
	\ 'coc-eslint',
	\ 'coc-explorer',
	\ 'coc-flutter-tools',
	\ 'coc-gitignore',
	\ 'coc-html',
	\ 'coc-import-cost',
	\ 'coc-jest',
	\ 'coc-json',
	\ 'coc-lists',
	\ 'coc-prettier',
	\ 'coc-prisma',
	\ 'coc-pyright',
	\ 'coc-python',
	\ 'coc-snippets',
	\ 'coc-sourcekit',
	\ 'coc-stylelint',
	\ 'coc-syntax',
	\ 'coc-tailwindcss',
	\ 'coc-tasks',
	\ 'coc-translator',
	\ 'coc-tslint-plugin',
	\ 'coc-tsserver',
	\ 'coc-vetur',
	\ 'coc-vimlsp',
	\ 'coc-yaml',
	\ 'coc-yank',
	\ 'https://github.com/rodrigore/coc-tailwind-intellisense']

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-o> coc#refresh()


" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <LEADER>- <Plug>(coc-diagnostic-prev)
nmap <silent> <LEADER>= <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
" Remap for do codeAction of selected region
" 比如包裹() {}
" function! s:cocActionsOpenFromSelected(type) abort
"   execute 'CocCommand actions.open ' . a:type
" endfunction
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
" nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

"inoremap <silent><expr> <TAB>
	"\ pumvisible() ? "\<C-n>" :
	"\ <SID>check_back_space() ? "\<TAB>" :
	"\ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
"inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
"function! s:check_back_space() abort
	"let col = col('.') - 1
	"return !col || getline('.')[col - 1]  =~# '\s'
"endfunction
"inoremap <silent><expr> <c-space> coc#refresh()
"inoremap <silent><expr> <c-o> coc#refresh()
"function! Show_documentation()
	"call CocActionAsync('highlight')
	"if (index(['vim','help'], &filetype) >= 0)
		"execute 'h '.expand('<cword>')
	"else
		"call CocAction('doHover')
	"endif
"endfunction
"nnoremap <LEADER>h :call Show_documentation()<CR>
"" set runtimepath^=~/.config/nvim/coc-extensions/coc-flutter-tools/
"" let g:coc_node_args = ['--nolazy', '--inspect-brk=6045']
"" let $NVIM_COC_LOG_LEVEL = 'debug'
"" let $NVIM_COC_LOG_FILE = '/Users/david/Desktop/log.txt'

"nnoremap <silent><nowait> <LEADER>d :CocList diagnostics<cr>
"nmap <silent> <LEADER>- <Plug>(coc-diagnostic-prev)
"nmap <silent> <LEADER>= <Plug>(coc-diagnostic-next)
"nnoremap <c-c> :CocCommand<CR>
"" Text Objects
"xmap kf <Plug>(coc-funcobj-i)
"xmap af <Plug>(coc-funcobj-a)
"omap kf <Plug>(coc-funcobj-i)
"omap af <Plug>(coc-funcobj-a)
"xmap kc <Plug>(coc-classobj-i)
"omap kc <Plug>(coc-classobj-i)
"xmap ac <Plug>(coc-classobj-a)
"omap ac <Plug>(coc-classobj-a)
"" Useful commands
"nnoremap <silent> <space>y :<C-u>CocList -A --normal yank<cr>
"nmap <silent> gd <Plug>(coc-definition)
"nmap <silent> gD :tab sp<CR><Plug>(coc-definition)
"nmap <silent> gy <Plug>(coc-type-definition)
"" nmap <silent> gi <Plug>(coc-implementation)
"nmap <silent> gr <Plug>(coc-references)
"nmap <leader>rn <Plug>(coc-rename)
"nmap tt :CocCommand explorer<CR>
"" coc-translator
"nmap ts <Plug>(coc-translator-p)
"" Remap for do codeAction of selected region
"function! s:cocActionsOpenFromSelected(type) abort
  "execute 'CocCommand actions.open ' . a:type
"endfunction
"xmap <leader>a  <Plug>(coc-codeaction-selected)
"nmap <leader>aw  <Plug>(coc-codeaction-selected)w
"" coctodolist
"" nnoremap <leader>tn :CocCommand todolist.create<CR>
"" nnoremap <leader>tl :CocList todolist<CR>
"" nnoremap <leader>tu :CocCommand todolist.download<CR>:CocCommand todolist.upload<CR>
"" coc-tasks
"noremap <silent> <leader>ts :CocList tasks<CR>
"" coc-snippets
"imap <C-l> <Plug>(coc-snippets-expand)
"vmap <C-e> <Plug>(coc-snippets-select)
"let g:coc_snippet_next = '<c-e>'
"let g:coc_snippet_prev = '<c-n>'
"imap <C-e> <Plug>(coc-snippets-expand-jump)
"let g:snips_author = 'David Chen'
"autocmd BufRead,BufNewFile tsconfig.json set filetype=jsonc

" Mappings for CoCList
" Show all diagnostics.
"nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
"nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
"nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
"nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
"nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
"nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
"nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
"nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
" let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
"  所生成的数据文件的名称 "
" let g:gutentags_ctags_tagfile = '.tags'
"  将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
" let s:vim_tags = expand('~/.cache/tags')
" let g:gutentags_cache_dir = s:vim_tags
"  检测 ~/.cache/tags 不存在就新建 "
" if !isdirectory(s:vim_tags)
"    silent! call mkdir(s:vim_tags, 'p')
" endif
"  配置 ctags 的参数 "
" let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
" let g:gutentags_ctags_extra_args += ['--c-kinds=+px']



" ===
" === nvim-treesitter
" ===
" lua <<EOF
" require'nvim-treesitter.configs'.setup {
"   ensure_installed = {"typescript", "dart", "java"},     -- one of "all", "language", or a list of languages
"   highlight = {
"     enable = true,              -- false will disable the whole extension
"     disable = { "c", "rust" },  -- list of language that will be disabled
"   },
" }
" EOF


