 
let mapleader=' '

map <LEADER>0  $
"map <LEADER>f  <C-f>
"map <LEADER>b  <C-b>
map <LEADER>w  <C-w>
map <LEADER>t :tabnew
map <LEADER>e :Ex<CR>
map <LEADER>h :noh<CR>
map <LEADER>o za
map <LEADER>u zR
map <LEADER>i zM
noremap tn :NERDTree<CR>
noremap tt :Tagbar<CR>
noremap tl :LLPStartPreview<CR>
"noremap tr :source %<CR>
"noremap tc :w<CR>:so %<CR>
noremap tm :MarkdownPreview<CR>
noremap ta :TableModeToggle<CR>
nnoremap tu :UndotreeToggle<CR>
" 函数跳转
noremap <leader>] :YcmCompleter GoTo<cr>


" 可视模式下系统粘贴
vnoremap Y "+y

" config

set ttimeoutlen=100
filetype on
filetype plugin on
filetype indent on
filetype plugin indent on

" UI

set termguicolors " 真彩色
"set t_Co=256
set laststatus=2 " always show status bar
set showcmd " last command
" set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")} " status line
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
set undofile "持久性撤销
set nu
syntax on
exec "nohlsearch"
set foldenable
" set foldmethod=indent " use indent to fold

" autocmd BUfRead * normal zR " open a file, open all fold.
set smartcase
set ci
set sm
 set relativenumber

"光标不同显示
"let &t_ut=''
"let &t_SI = "\<Esc>]50;CursorShape=1\x7"
"let &t_SR = "\<Esc>]50;CursorShape=2\x7"
"let &t_EI = "\<Esc>]50;CursorShape=0\x7"
if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\e[5 q\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\e[2 q\<Esc>\\"
else
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
endif
set expandtab " tab 展开为空格
set tabstop=2
set shiftwidth=4
set softtabstop=2
set clipboard=unnamed
set si

" edit

" move

" search

set autoread

set report=0 "通过使用: commands命令，告诉我们文件的哪一行被改变过"

"被分割的窗口间显示空白，便于阅读"
set fillchars=vert:\ ,stl:\ ,stlnc:\
set smarttab
set autoindent

set spell " 拼写检查 (c-x, than s)

set wrap "自动换行”

set wildmenu "增强模式中的命令行自动完成操作"

set ruler "显示标尺"

set backspace=eol,start,indent "使回格键（backspace）正常处理indent, eol, start等"

"set whichwrap+=<,>,h,l  "允许空格键和光标键跨越行边界

set showmatch "高亮显示匹配的括号([{和}])

set scrolloff=5 "光标移动到buffer的顶部和底部时保持5行距离
highlight Search ctermbg=black ctermfg=white guifg=white guibg=black
set hlsearch
set incsearch

set ignorecase "忽略大小写
set wildignorecase

"用浅色高亮显示当前行"
set nocursorcolumn "竖
set cursorline "横
autocmd InsertLeave * se cul
autocmd InsertEnter * se nocul

"highlight CursorLine   cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE
"highlight CursorColumn cterm=NONE ctermbg=black ctermfg=green guibg=NONE guifg=NONE

"cterm 表示为原生vim设置样式，设置为NONE表示可以自定义设置。
"ctermbg 设置终端vim的背景色
"ctermfg 设置终端vim的前景色
"guibg 和 guifg 分别是设置gvim的背景色和前景色

"开启新行时使用智能自动缩进"
set smartindent
set cin
set showmatch

" tags父目录递归查找 ;表示持续查找
"set tags=tags;
" Regenerate tags when saving Python files.
"autocmd BufWritePost *.py silent! !ctags -R &
"autocmd BufWritePost *.c silent! !ctags -R &
"autocmd BufWritePost *.cpp silent! !ctags -R &

"文件类型自动检测，代码智能补全"
set completeopt=longest,preview,menu

set encoding=utf-8
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set fileencodings=utf-8 "设置文件编码"
set termencoding=utf-8 "设置终端编码"
set langmenu=zh_CN.UTF-8 "设置语言编码"
set helplang=cn
"显示中文帮助"

if version >= 603
        set helplang=cn
            set encoding=utf-8
endif


" <f5> 编译和运行C map <LEADER>r :call CompileRunGcc()<cr>
map <LEADER>r :call CompileRunGcc()<cr>
func! CompileRunGcc()
exec "w"
exec "!gcc % -o %<"
exec "! ./%<"
endfunc

"< F5> 编译和运行C++
map <f5> :call CompileRunGpp()<cr>
func! CompileRunGpp()
exec "w"
exec "!g++ % -o %<"
exec "! ./%<"
exec "! rm %<"
endfunc

" <f5> 运行python程序
map <f5> :w<cr>:!python %<cr>

" <f5> 运行shell程序
map <f5> :call CompileRunSH()<cr>
func! CompileRunSH()
exec "w"
exec "!chmod a+x %"
exec "!./%"
endfunc

"<f9>  gdb调试
map <LEADER>d :call Debug()<cr>
func!  Debug()
exec "w"
exec "!gcc -g -o %< %"
exec ":Termdebug %<"
exec "! rm %<"
endfunc
"</cr></f9></f9></cr></f5></f5></cr></cr></f5></f5></cr></f5></cr></f5></f5>



autocmd BufNewFile *.py,*.cc,*.sh,*.java exec ":call SetTitle()"
func SetTitle()
    if expand ("%:e") == 'sh'
        call setline(1, "#!/bin/bash")
        call setline(2, "#Author:bert")
        call setline(3, "#Blog:https://blog.51cto.com/zpf666")
        call setline(4, "#Time:".strftime("%F %T"))
        call setline(5, "#Name:".expand("%"))
        call setline(6, "#Version:V1.0")
        call setline(7, "#Description:This is a production script.")
    endif
endfunc


" install plug

if empty(glob('~/.vim/autoload/plug.vim'))
  silent ! curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')


" tabline
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" use theme
Plug 'morhetz/gruvbox'
Plug 'dracula/vim', { 'as': 'dracula' }
Plug 'ajmwagar/vim-deus'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'

" ()color
" Plug 'luochen1990/rainbow'

" type

" can complete the () and so on
Plug 'raimondi/delimitmate'

" search
" Plug 'mileszs/ack.vim'
" Plug 'ctrlpvim/ctrlp.vim'

" comment
" in <space>cc to comment a line
Plug 'scrooloose/nerdcommenter'

" File navigation
Plug 'preservim/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'ap/vim-buftabline'

" search fzf ack

" 键映射
" [f [b
Plug 'tpope/vim-unimpaired'
" <leader><leader>+
Plug 'easymotion/vim-easymotion'
" assignment promot
" Plug 'Shougo/echodoc.vim'


" Code

" Taglist
" Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }

" 项目文件，跳转
"Plug 'ludovicchabant/vim-gutentags'
" change to .h file, :A :AT ...

" Error checking
Plug 'w0rp/ale'
" Plug 'scrooloose/syntastic'

" Auto Complete
Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'Valloric/YouCompleteMe', {'do': './install.py'}

" snippets
" Track the engine.
Plug 'SirVer/ultisnips'
" Snippets are separated from the engine. Add this if you want them:
" Plug 'honza/vim-snippets'
" cs"(
" Plug 'tpope/vim-surround'



" debug
"Plug 'puremourning/vimspector'

" Undo Tree 修改历史
"noremap <f5> :GundoToggle<cr>
" Plug 'sjl/gundo.vim'
Plug 'mbbill/undotree'

" Other visual enhancement
" Plug 'nathanaelkane/vim-indent-guides'
Plug 'Yggdroot/indentLine'
" 相同字符串下划线
Plug 'itchyny/vim-cursorword'

" highlight
Plug 'octol/vim-cpp-enhanced-highlight'

" register
Plug 'junegunn/vim-peekaboo'
" mark
Plug 'kshenoy/vim-signature'

" type
Plug 'rlue/vim-barbaric'
" Plug 'lyokha/vim-xkbswitch' let g:XkbSwitchEnabled = 1

" Git
" Plug 'rhysd/conflict-marker.vim'
" Plug 'tpope/vim-fugitive'
" Plug 'mhinz/vim-signify'
" Plug 'gisphm/vim-gitignore', { 'for': ['gitignore', 'vim-plug'] }

" HTML, CSS, JavaScript, PHP, JSON, etc.
" Plug 'elzr/vim-json'
" Plug 'hail2u/vim-css3-syntax'
" Plug 'spf13/PIV', { 'for' :['php', 'vim-plug'] }
" Plug 'gko/vim-coloresque', { 'for': ['vim-plug', 'php', 'html', 'javascript', 'css', 'less'] }
" Plug 'pangloss/vim-javascript', { 'for' :['javascript', 'vim-plug'] }
" HTML
" Plug 'mattn/emmet-vim'

" Python
" Plug 'vim-scripts/indentpython.vim'

" Other useful utilities
" Plug 'terryma/vim-multiple-cursors'

" distraction free writing mode
" Plug 'junegunn/goyo.vim'

"line up text"
" type ;Tabularize /= to align the =
" Plug 'godlygeek/tabular'
" in Visual mode, type i' to select all text in '', or type i) i] i} ip
" Plug 'gcmt/wildfire.vim'


" Dependencies

" Plug 'MarcWeber/vim-addon-mw-utils'
" Plug 'kana/vim-textobj-user'
" Plug 'fadein/vim-FIGlet'

" Markdown
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install_sync() }, 'for': ['markdown', 'vim-plug'] }
" 补全
Plug 'dhruvasagar/vim-table-mode', { 'on': 'TableModeToggle' }
" 格式
" Plug 'plasticboy/vim-markdown', { 'for': 'markdown'}

" math
"Plug 'iamcco/mathjax-support-for-mkdp'
"Plug 'iamcco/markdown-preview.vim'
" 自定义
"Plug 'vimwiki/vimwiki'


" Latex
Plug 'lervag/vimtex'
Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }

call plug#end()

" let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
" latex
 let g:livepreview_engine = 'xelatex'

set background=dark

let g:airline_theme='gruvbox'
colorscheme gruvbox
"colorscheme dracula
let g:gruvbox_italic=1

"set t_Co=256
"set termguicolors
"let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
"let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
"colorscheme deus
"let g:deus_termcolors=256

"let g:airline_theme='luna'

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

"  powerline symbols
 let g:airline_left_sep = ''
 let g:airline_left_alt_sep = ''
 let g:airline_right_sep = ''
 let g:airline_right_alt_sep = ''
 let g:airline_symbols.branch = ''
 let g:airline_symbols.readonly = ''
" let g:airline_symbols.linenr = '☰'
 let g:airline_symbols.maxlinenr = ''
 let g:airline_symbols.dirty='⚡'

" type


" indent
let g:indentLine_enabled = 1
"let g:indentLine_char_list = ['┆']
let g:indentLine_char_list = ['¦']



"NERDTree
"autocmd VimEnter * NERDTree | wincmd p
"let NERDTreeShowBookmarks = 1
" directory
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists('s:std_in') |
    \ execute 'NERDTree' argv()[0] | wincmd p | enew | execute 'cd '.argv()[0] | endif
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
" Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif

" code

" syntastic

"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*

"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0

" coc
let g:coc_global_extensions = ['coc-json', 'coc-vimlsp', 'coc-yaml', 'coc-texlab', 'coc-markdownlint']
" 'coc-actions',
" javascript: coc-eslint, js or ts: coc-tsserver, coc-python, coc-pyright for,
" coc-phpls, coc-snippets

" TextEdit might fail if hidden is not set.
set hidden

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=100

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction


" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-o> coc#refresh()


" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <LEADER>- <Plug>(coc-diagnostic-prev)
nmap <silent> <LEADER>= <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
" Remap for do codeAction of selected region
" 比如包裹() {}
" function! s:cocActionsOpenFromSelected(type) abort
"   execute 'CocCommand actions.open ' . a:type
" endfunction
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
" nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
" nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
"nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
"nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
"nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
"nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
"nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
"nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
"nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
"nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" Youcompleteme

"nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
"nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
"nnoremap <leader>gi :YcmCompleter GoToDefinitionElseDeclaration<CR>


" set completeopt=menu,menuone
" let g:ycm_add_preview_to_completeopt = 0
" let g:ycm_show_diagnostics_ui = 0
" let g:ycm_server_log_level = 'info'
" let g:ycm_min_num_identifier_candidate_chars = 2
" let g:ycm_collect_identifiers_from_comments_and_strings = 1
" let g:ycm_complete_in_strings=1
" let g:ycm_key_invoke_completion = '<c-z>'
" noremap <c-z> <NOP>
"
" let g:ycm_semantic_triggers =  {
" 			\ 'c,cpp,python,java,go,erlang,perl': ['re!\w{2}'],
" 			\ 'cs,lua,javascript': ['re!\w{2}'],
" 			\ }
" let g:ycm_filetype_whitelist = {
" 			\ "c":1,
" 			\ "cpp":1,
" 			\ "objc":1,
" 			\ "sh":1,
" 			\ "zsh":1,
" 			\ "zimbu":1,
"       \ "markdown":1,
" 			\ }
"

"vimspector

"let g:vimspector_enable_mappings = 'HUMAN'
"packadd! vimspector

"debug
packadd termdebug

" Snippets

" Trigger configuration. You need to change this to something other than <tab> if you use one of the following:
" - https://github.com/Valloric/YouCompleteMe
" - https://github.com/nvim-lua/completion-nvim
let g:UltiSnipsExpandTrigger="<c-e>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


" gutentags搜索工程目录的标志，碰到这些文件/目录名就停止向上一级目录递归 "
" let g:gutentags_project_root = ['.root', '.svn', '.git', '.project']
"  所生成的数据文件的名称 "
" let g:gutentags_ctags_tagfile = '.tags'
"  将自动生成的 tags 文件全部放入 ~/.cache/tags 目录中，避免污染工程目录 "
" let s:vim_tags = expand('~/.cache/tags')
" let g:gutentags_cache_dir = s:vim_tags
"  检测 ~/.cache/tags 不存在就新建 "
" if !isdirectory(s:vim_tags)
"    silent! call mkdir(s:vim_tags, 'p')
" endif
"  配置 ctags 的参数 "
" let g:gutentags_ctags_extra_args = ['--fields=+niazS', '--extra=+q']
" let g:gutentags_ctags_extra_args += ['--c++-kinds=+pxI']
" let g:gutentags_ctags_extra_args += ['--c-kinds=+px']

